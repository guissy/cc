'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Animate = undefined;

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _rebound = require('rebound');

var _rebound2 = _interopRequireDefault(_rebound);

var _stylistic = require('stylistic');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var springSystem = new _rebound2.default.SpringSystem();

function isNumeric(n) {
  if (Array.isArray(n)) return n.every(function (x) {
    return typeof x === 'number';
  });
  return typeof n === 'number';
}

var Animate = exports.Animate = function (_React$Component) {
  _inherits(Animate, _React$Component);

  function Animate() {
    _classCallCheck(this, Animate);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Animate).call(this));

    _this.onAnimationStart = function () {
      if (_this.animating) return;
      _this.animating = true;
      if (typeof _this.props.children === 'function') {
        _this.setState({}); // Trigger a re-render
      }
      _this.props.onStart && _this.props.onStart();
    };

    _this.onAnimationEnd = function () {
      if (!_this.animating) return;
      _this.animating = false;
      if (typeof _this.props.children === 'function') {
        _this.setState({}); // Trigger a re-render
      }
      _this.props.onEnd && _this.props.onEnd();
    };

    _this.requestUpdate = function () {
      if (!_this.request) {
        _this.request = (0, _raf2.default)(_this.performUpdate);
      }
    };

    _this.performUpdate = function () {
      _this.request = null;
      var current = Object.keys(_this.springs).reduce(function (obj, key) {
        if (key.indexOf('/') > 0) {
          var _key$split = key.split('/');

          var _key$split2 = _slicedToArray(_key$split, 2);

          var name = _key$split2[0];
          var index = _key$split2[1];

          obj[name] || (obj[name] = []);
          obj[name][parseInt(index, 10)] = _this.springs[key].getCurrentValue();
        } else {
          obj[key] = _this.springs[key].getCurrentValue();
        }
        return obj;
      }, {});

      var _extract = (0, _stylistic.extract)(_extends({}, _this.props, current));

      var style = _extract.style;

      for (var key in style) {
        _this.node.style[key] = style[key];
      }
    };

    _this.springs = {};
    _this.animating = false;
    return _this;
  }

  _createClass(Animate, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.node = _reactDom2.default.findDOMNode(this);
      this.triggerAnimations(this.getChild().props, this.props);
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps) {
      // Check if this render will start an animation
      if (!this.animating && this.getChangedProps(this.props, nextProps).length > 0) {
        this.onAnimationStart();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(lastProps) {
      this.triggerAnimations(lastProps, this.props);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.animating = false;
      for (var prop in this.springs) {
        this.springs[prop].setAtRest();
      }
    }
  }, {
    key: 'triggerAnimations',
    value: function triggerAnimations(lastProps, nextProps) {
      var _this2 = this;

      this.getChangedProps(lastProps, nextProps).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 3);

        var prop = _ref2[0];
        var start = _ref2[1];
        var end = _ref2[2];
        var tension = nextProps.tension;
        var friction = nextProps.friction;
        var delay = nextProps.delay;

        _this2.springs[prop] || _this2.createSpring(prop, start, tension, friction);
        _this2.setEndValue(prop, end, delay);
      });
    }
  }, {
    key: 'isNotSpecialProp',
    value: function isNotSpecialProp(prop) {
      return ['tension', 'friction', 'delay', 'onStart', 'onEnd'].indexOf(prop) < 0;
    }
  }, {
    key: 'getChangedProps',
    value: function getChangedProps(lastProps, nextProps) {
      return Object.keys(nextProps).filter(this.isNotSpecialProp).filter(function (prop) {
        return nextProps[prop] !== lastProps[prop] && isNumeric(nextProps[prop]) && isNumeric(lastProps[prop]);
      }).map(function (prop) {
        return [prop, lastProps[prop], nextProps[prop]];
      });
    }
  }, {
    key: 'createSpring',
    value: function createSpring(key, startValue) {
      var _this3 = this;

      var tension = arguments.length <= 2 || arguments[2] === undefined ? 40 : arguments[2];
      var friction = arguments.length <= 3 || arguments[3] === undefined ? 7 : arguments[3];

      if (Array.isArray(startValue)) {
        return startValue.forEach(function (value, i) {
          _this3.createSpring(key + '/' + i, value, tension, friction);
        });
      }
      this.springs[key] = springSystem.createSpring(tension, friction);
      this.springs[key].setCurrentValue(startValue);
      this.springs[key].addListener({
        onSpringActivate: this.onAnimationStart,
        onSpringAtRest: this.onAnimationEnd,
        onSpringUpdate: this.requestUpdate
      });
    }
  }, {
    key: 'setEndValue',
    value: function setEndValue(key, endValue, delay) {
      var _this4 = this;

      if (delay) {
        setTimeout(function () {
          return _this4.setEndValue(key, endValue);
        }, delay);
        return;
      }

      if (Array.isArray(endValue)) {
        return endValue.forEach(function (value, i) {
          _this4.setEndValue(key + '/' + i, value);
        });
      }
      this.springs[key].setEndValue(endValue);
    }
  }, {
    key: 'getChild',
    value: function getChild() {
      var child = this.props.children;
      if (typeof child === 'function') {
        child = child(this.animating);
      }
      return _react2.default.Children.only(child);
    }
  }, {
    key: 'render',
    value: function render() {
      return this.getChild();
    }
  }]);

  return Animate;
}(_react2.default.Component);

Animate.displayName = 'Animate';